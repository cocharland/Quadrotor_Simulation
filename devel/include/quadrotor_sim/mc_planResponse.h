// Generated by gencpp from file quadrotor_sim/mc_planResponse.msg
// DO NOT EDIT!


#ifndef QUADROTOR_SIM_MESSAGE_MC_PLANRESPONSE_H
#define QUADROTOR_SIM_MESSAGE_MC_PLANRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace quadrotor_sim
{
template <class ContainerAllocator>
struct mc_planResponse_
{
  typedef mc_planResponse_<ContainerAllocator> Type;

  mc_planResponse_()
    : nextPose()  {
    }
  mc_planResponse_(const ContainerAllocator& _alloc)
    : nextPose(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _nextPose_type;
  _nextPose_type nextPose;





  typedef boost::shared_ptr< ::quadrotor_sim::mc_planResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::quadrotor_sim::mc_planResponse_<ContainerAllocator> const> ConstPtr;

}; // struct mc_planResponse_

typedef ::quadrotor_sim::mc_planResponse_<std::allocator<void> > mc_planResponse;

typedef boost::shared_ptr< ::quadrotor_sim::mc_planResponse > mc_planResponsePtr;
typedef boost::shared_ptr< ::quadrotor_sim::mc_planResponse const> mc_planResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::quadrotor_sim::mc_planResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::quadrotor_sim::mc_planResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace quadrotor_sim

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::quadrotor_sim::mc_planResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::quadrotor_sim::mc_planResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::quadrotor_sim::mc_planResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::quadrotor_sim::mc_planResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quadrotor_sim::mc_planResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quadrotor_sim::mc_planResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::quadrotor_sim::mc_planResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "43874bb3f8ebc78572ab5e24194fe094";
  }

  static const char* value(const ::quadrotor_sim::mc_planResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x43874bb3f8ebc785ULL;
  static const uint64_t static_value2 = 0x72ab5e24194fe094ULL;
};

template<class ContainerAllocator>
struct DataType< ::quadrotor_sim::mc_planResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "quadrotor_sim/mc_planResponse";
  }

  static const char* value(const ::quadrotor_sim::mc_planResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::quadrotor_sim::mc_planResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Pose nextPose\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::quadrotor_sim::mc_planResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::quadrotor_sim::mc_planResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.nextPose);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct mc_planResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::quadrotor_sim::mc_planResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::quadrotor_sim::mc_planResponse_<ContainerAllocator>& v)
  {
    s << indent << "nextPose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.nextPose);
  }
};

} // namespace message_operations
} // namespace ros

#endif // QUADROTOR_SIM_MESSAGE_MC_PLANRESPONSE_H
